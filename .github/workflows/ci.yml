name: ci

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

jobs:
    code-style:
        runs-on: ubuntu-24.04
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    submodules: recursive
            -   name: Install clang-format-20
                run: |
                    UBUNTU_CODENAME=$(. /etc/os-release && echo $VERSION_CODENAME)
                    CLANG_FORMAT_VERSION=20
                    wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
                    echo "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-${CLANG_FORMAT_VERSION} main" | sudo tee /etc/apt/sources.list.d/llvm.list
                    echo "deb-src http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-${CLANG_FORMAT_VERSION} main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
                    sudo apt-get update
                    sudo apt-get install clang-format-${CLANG_FORMAT_VERSION}
                    sudo ln -s -f /usr/bin/clang-format-${CLANG_FORMAT_VERSION} /usr/bin/clang-format
                    clang-format --version
            -   name: Check code style
                run: |
                    cmake -B build .
                    cmake --build build -- check-format

    windows:
        needs: code-style
        runs-on: ${{ matrix.runner }}
        strategy:
            fail-fast: false
            matrix:
                runner:
                    - windows-2022
                    - windows-2025
                arch:
                    - amd64
                    - x86
                    - amd64_arm64
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    submodules: recursive
            -   uses: ilammy/msvc-dev-cmd@v1
                with:
                    arch: ${{ matrix.arch }}
            -   name: Build
                shell: cmd
                run: |
                    cmake -GNinja -B build .
                    cmake --build build -- all
            -   name: Test
                if: ${{ matrix.arch != 'amd64_arm64' }}
                shell: cmd
                run: |
                    cmake --build build -- check

    macos:
        needs: code-style
        runs-on: ${{ matrix.runner }}
        strategy:
            fail-fast: false
            matrix:
                runner:
                    - macos-13
                    - macos-14
                    - macos-15
                arch:
                    - x86_64
                    - arm64
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    submodules: recursive
            -   name: Build
                run: |
                    cmake -GNinja -DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}} -B build .
                    cmake --build build -- all
                    echo "SYSTEM_ARCH=$(uname -m)" >> $GITHUB_ENV
            -   name: Test
                if: ${{ env.SYSTEM_ARCH == 'arm64' || matrix.arch == 'x86_64' }}
                run: |
                    cmake --build build -- check

    linux:
        needs: code-style
        runs-on: ${{ matrix.runner }}
        strategy:
            fail-fast: false
            matrix:
                runner:
                    - ubuntu-22.04
                    - ubuntu-24.04
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    submodules: recursive
            -   name: Build
                run: |
                    cmake -GNinja -B build .
                    cmake --build build -- all
            -   name: Test
                run: |
                    cmake --build build -- check
